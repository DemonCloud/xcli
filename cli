#!/usr/bin/env node

// XCLI
// @Author: YiJun(sihao)
// @VERISON 0.0.1

const cli = require('commander');
const colors = require('colors');
const packageJSON = require('./package.json');
const DESCRIPTION = require('./dict/commandos/DESCRIPTION');
const commands = ['init', 'dev', 'build', 'publish', 'plugin', 'link', 'unlink', 'upgrade'];

const init = require('./commandos/init');
const dev = require('./commandos/dev');
const build = require('./commandos/build');
const publish = require('./commandos/publish');
const link = require('./commandos/link');
const unlink = require('./commandos/unlink');
const plugin = require('./commandos/plugin');
const upgrade = require('./commandos/upgrade');
// const cmd_lint = require('./scripts/lint');
// const cmd_preview = require('./scripts/preview');

const logo =
`           ____  ___     .__  .__
           \\   \\/  /____ |  | |__|
            \\     // ___\\|  | |  |
            /     \\  \\___|  |_|  |
           /___/\\  \\___  >____/__|
                 \\_/   \\/
`.red;

cli.
  version(packageJSON.version).
  usage('[command]'.green).
  description(logo + "\n     " + packageJSON.description.red);

// Register Command
cli.
  command('init [projectName]').
  description(DESCRIPTION.init).
  action(init);

cli.
  command('plugin [command] [pluginName]').
  description(DESCRIPTION.plugin).
  action(plugin);

cli.
  command('dev').
  option('-d, --debug', `${'devServer'.bold} with [debug] mode`).
  description(DESCRIPTION.dev).
  action(dev);

cli.
  command('build').
  option('-d, --debug', `${'build'.bold} with [debug] mode`).
  description(DESCRIPTION.build).
  action(build);

cli.
  command('publish').
  option('-d, --debug', `${'publish'.bold} with [debug] mode`).
  description(DESCRIPTION.publish).
  action(publish);

cli.
  command('upgrade').
  description(DESCRIPTION.upgrade).
  action(upgrade);

cli.
  command('link').
  description(DESCRIPTION.link).
  action(link);

cli.
  command('unlink').
  description(DESCRIPTION.unlink).
  action(unlink);

// cli
//   .command('preview')
//   .description('building and preview'.red)
//   .action(cmd_preview);

// cli
//   .command('upgrade')
//   .description('upgrade xcli'.red)
//   .action(cmd_upgrade);

// cli
//   .command('publish')
//   .description('publish current project'.red)
//   .action(cmd_publish);

// cli
//   .command('lint [fix]')
//   .description('lint code style'.red)
//   .action(cmd_lint);

// cli
//   .command('help')
//   .description('check help infomation'.green)
//   .action(() => cli.help());

cli.parse(process.argv);

if (!cli.args.length || !process.argv[2] || !commands.includes(process.argv[2])) cli.help();
